from aiogram import types, Router, F
from voice_utils import transcribe_voice
from search import search_profiles
import logging

router = Router()

@router.message(F.text == "/start")
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ–≥–æ —Ç—ã –∏—â–µ—à—å.")

# @router.message(F.voice)
# async def voice_handler(message: types.Message):
#     file = await message.bot.get_file(message.voice.file_id)
#     file_path = file.file_path
#     file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"
#
#     text = transcribe_voice(file_url)
#     if not text:
#         await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å.")
#         return
#
#     await handle_search(message, text)

@router.message(F.voice)
async def voice_handler(message: types.Message):
    try:
        logging.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...")

        file = await message.bot.get_file(message.voice.file_id)
        logging.warning(f"File object: {file}")

        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"
        logging.warning(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω file_url: {file_url}")

        text = transcribe_voice(file_url)
        logging.warning(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        if not text:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å.")
            logging.warning("Whisper –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            return

        await message.reply(f"üîç –ò—â—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: ‚Äú{text}‚Äù")
        await handle_search(message, text)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ. –°–º. –ª–æ–≥–∏.")

@router.message(F.text)
async def text_handler(message: types.Message):
    await handle_search(message, message.text)

async def handle_search(message: types.Message, query: str):
    results = search_profiles(query)
    if not results:
        await message.reply("–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
        return

    response = "\n\n".join([f"üë§ {r['name']}\n{r['desc']}\n{r['link']}" for r in results])
    await message.reply(response)


def register_handlers(dp):
    dp.include_router(router)
