from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from query_refiner import refine_query
from search import search_profiles
from voice_utils import transcribe_voice
from aiogram.filters import StateFilter

router = Router()

class SearchFSM(StatesGroup):
    awaiting_confirmation = State()

@router.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º, –∫–æ–≥–æ —Ç—ã –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω—É–∂–µ–Ω –¥–∏–¥–∂–µ–π –Ω–∞ —Ä–µ–π–≤ –≤ –ö–∞–∑–∞–Ω–∏¬ª)")

@router.message(StateFilter(None), F.text)
async def text_handler(message: types.Message, state: FSMContext):
    raw_text = message.text
    await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    refined = refine_query(raw_text)
    if not refined:
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
        return

    await state.update_data(refined=refined)

    preview = "\n".join([
        f"üîπ –†–æ–ª—å: {refined.get('role') or '‚Äî'}",
        f"üîπ –°—Ç–∏–ª—å: {refined.get('style') or '‚Äî'}",
        f"üîπ –õ–æ–∫–∞—Ü–∏—è: {refined.get('location') or '‚Äî'}",
        f"üîπ –°–æ–±—ã—Ç–∏–µ: {refined.get('event') or '‚Äî'}",
        f"üîπ –í—Ä–µ–º—è: {refined.get('preferred_time') or '‚Äî'}",
        f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {refined.get('other') or '‚Äî'}"
    ])

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ"), KeyboardButton(text="‚ùå –ò–∑–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(f"–í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n\n{preview}", reply_markup=kb)
    await state.set_state(SearchFSM.awaiting_confirmation)

@router.message(F.voice)
async def voice_handler(message: types.Message, state: FSMContext):
    await message.answer("üîä –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...")

    file = await message.bot.get_file(message.voice.file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_path}"

    text = transcribe_voice(file_url)
    if not text:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.")
        return

    await message.answer(f"üìù –¢–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:\n\n‚Äú{text}‚Äù\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    refined = refine_query(text)
    if not refined:
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        return

    await state.update_data(refined=refined)

    preview = "\n".join([
        f"üîπ –†–æ–ª—å: {refined.get('role') or '‚Äî'}",
        f"üîπ –°—Ç–∏–ª—å: {refined.get('style') or '‚Äî'}",
        f"üîπ –õ–æ–∫–∞—Ü–∏—è: {refined.get('location') or '‚Äî'}",
        f"üîπ –°–æ–±—ã—Ç–∏–µ: {refined.get('event') or '‚Äî'}",
        f"üîπ –í—Ä–µ–º—è: {refined.get('preferred_time') or '‚Äî'}",
        f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {refined.get('other') or '‚Äî'}"
    ])

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ"), KeyboardButton(text="‚ùå –ò–∑–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(f"–í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n\n{preview}", reply_markup=kb)
    await state.set_state(SearchFSM.awaiting_confirmation)

@router.message(SearchFSM.awaiting_confirmation, F.text.in_(["‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "‚ùå –ò–∑–º–µ–Ω–∏—Ç—å"]))
async def confirm_handler(message: types.Message, state: FSMContext):
    choice = message.text

    if choice == "‚ùå –ò–∑–º–µ–Ω–∏—Ç—å":
        await message.answer("‚úèÔ∏è –û–∫, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    data = await state.get_data()
    refined = data.get("refined")

    if not refined:
        await message.answer("‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–ø—Ä–æ—Å. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    final_query = " ".join(filter(None, [
        refined.get("role", ""),
        "–≤ —Å—Ç–∏–ª–µ", refined.get("style", ""),
        "–≤", refined.get("location", ""),
        "–Ω–∞", refined.get("event", ""),
        refined.get("preferred_time", ""),
        refined.get("other", "")
    ]))

    await message.answer(f"üîç –ò—â—É: {final_query}", reply_markup=ReplyKeyboardRemove())

    results = search_profiles(final_query)

    if not results:
        await message.answer("–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª üòï")
    else:
        response = "\n\n".join([
            f"üë§ {r.properties['name']} (score: {r.metadata.score:.2f})\n{r.properties['desc']}\n{r.properties['link']}"
            for r in results
        ])
        await message.answer(response)

    await state.clear()


def register_handlers(dp):
    dp.include_router(router)
