import logging
import requests
import openai
import tempfile
from config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

def transcribe_voice(file_url: str) -> str:
    logging.info(f"üîó –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Å URL: {file_url}")

    try:
        response = requests.get(file_url)
        response.raise_for_status()
        logging.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ")
        return None

    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmp_file:
            tmp_file.write(response.content)
            temp_path = tmp_file.name

        logging.info(f"üíæ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {temp_path}")

        with open(temp_path, "rb") as audio_file:
            transcript = openai.audio.transcriptions.create(
                        model="gpt-4o-transcribe",
                        file=audio_file
                        )
            logging.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcript.text}")
            return transcript.text

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ")
        return None
